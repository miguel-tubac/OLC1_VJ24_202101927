// ------------  Paquete e importaciones ------------
package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import InterfasGrafica.FrameInicio;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.TipoDato;
import Excepciones.Errores;

//instrucciones
import Instrucciones.Print;
import Instrucciones.DeclaracionVariables;
import Instrucciones.OperadoresVariables;
import Instrucciones.DeclaracionVariablesConExpresion;
import Instrucciones.Asignacion;
import Instrucciones.Casteos;
import Instrucciones.IncrementoDecremento;
import Instrucciones.SentenciasIF;
import Instrucciones.BloqueSentencia;
import Instrucciones.Break;
import Instrucciones.Continue;
import Instrucciones.Match;
import Instrucciones.Casos;

//expresiones
import Expresiones.Nativo;
import Expresiones.Aritmeticas;
import Expresiones.OperadoresAritmeticos;
import Expresiones.Relacionales;
import Expresiones.OperadoresRelacionales;
import Expresiones.Logicos;
import Expresiones.OperadoresLogicos;
import Expresiones.AccesoALaVariable;
                   
//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:

    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            listaErrores.add(new Errores("SINTACTICO RECUPERABLE","No se esperaba el componente "+s.value,s.left,s.right));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{: :}


//------> Declaración de terminales
terminal String ENTERO, TRUE, FALSE;
terminal String LLAVE_A, LLAVE_C;
terminal String NUMERODECIMAL;
terminal String ID;
terminal String DOSPUNTOS, DOBLEDOSPUNTOS;
terminal String COMA, PUNTOYCOMA, IGUAL;
terminal String PARENTESIS_A, PARENTESIS_C;
terminal String MENOR, MAYOR;
terminal String CORCHETE_A, CORCHETE_C;
terminal String DOBLEIGUAL, DIFERENCIA, MENORIGUAL, MAYORIGUAL;
terminal String OR, AND, XOR, NOT;
terminal String MAS, MENOS, POR, DIV, MODULO, POTENCIA;
terminal String DOBLEMAS, DOBLEMENOS;
terminal String IF, ELSE;
terminal CADENA, CARACTER;
terminal PRINTLN;
terminal VAR, CONST;
terminal INT, DOUBLE, BOOL, CHAR, STRING;
terminal String BREAK, CONTINUE, RETURN;
terminal String DATOSMATCH, MATCH, BAJO;




//------> Declaración de no terminales
non terminal LinkedList<Instruccion> inicio, lista_instrucciones;
non terminal Instruccion expresion;
non terminal Instruccion instruccion;
non terminal Instruccion imprimir, variables, asignacion; 
non terminal OperadoresVariables tipo;
non terminal TipoDato mutabilidad;
non terminal Instruccion casteos;
non terminal Instruccion incremento;
non terminal Instruccion sentecia_if, sentencia_elseif, sentencia_bloque; 
non terminal Instruccion sentenciasTransferencia;
non terminal Instruccion match_funcion, match_default, casos;
non terminal LinkedList<Instruccion> match_lista, match_inicio;


//------> PRECEDENCIA
precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left DOBLEIGUAL, DIFERENCIA, MENORIGUAL, MENOR, MAYOR, MAYORIGUAL;
precedence left MAS;
precedence left POR, DIV, MODULO;
precedence left POTENCIA;
precedence left PARENTESIS_A, PARENTESIS_C;
precedence left MENOS;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::=  lista_instrucciones:var {: RESULT = var; :}
;


lista_instrucciones ::=   lista_instrucciones:var1 instruccion:var2   {: RESULT = var1; RESULT.add(var2); :}
    | instruccion:var   {: RESULT = new LinkedList<>(); RESULT.add(var); :}
;

instruccion ::= imprimir:var     {: RESULT = var; :} 
    | variables:var              {: RESULT = var; :}
    | asignacion:var             {: RESULT = var; :}
    | incremento:var             {: RESULT = var; :}
    | sentecia_if:var            {: RESULT = var; :}
    | sentenciasTransferencia:var {: RESULT = var; :}
    | match_funcion:var          {: RESULT = var; :}
    | error PUNTOYCOMA
    | error LLAVE_C
;

variables ::=  mutabilidad:a ID:b DOSPUNTOS tipo:c PUNTOYCOMA               {: RESULT = new DeclaracionVariables(a, b, c, aleft, aright); :}
    | mutabilidad:a ID:b DOSPUNTOS tipo:c IGUAL expresion:d PUNTOYCOMA      {: RESULT = new DeclaracionVariablesConExpresion(a, b, c, d, aleft, aright); :}    
;

mutabilidad ::=  VAR    {: RESULT = TipoDato.VAR; :}
    | CONST             {: RESULT = TipoDato.CONST; :}
;

tipo ::= INT    {: RESULT = OperadoresVariables.INT; :} 
    | DOUBLE    {: RESULT = OperadoresVariables.DOUBLE; :} 
    | BOOL      {: RESULT = OperadoresVariables.BOOL; :} 
    | CHAR      {: RESULT = OperadoresVariables.CHAR; :} 
    | STRING    {: RESULT = OperadoresVariables.STRING; :}
;

casteos ::= PARENTESIS_A tipo:a PARENTESIS_C expresion:b {: RESULT = new Casteos(a,b, aleft, aright); :}
;

asignacion ::= ID:a IGUAL expresion:b PUNTOYCOMA        {: RESULT = new Asignacion(a, b, aleft, aright); :}
;

imprimir ::= PRINTLN PARENTESIS_A expresion:var PARENTESIS_C PUNTOYCOMA {: RESULT = new Print(var, varleft, varright); :} 
;

incremento ::= ID:a DOBLEMAS:b PUNTOYCOMA     {: RESULT = new IncrementoDecremento(a, b, aleft, aright); :}
    | ID:a DOBLEMENOS:b PUNTOYCOMA            {: RESULT = new IncrementoDecremento(a, b, aleft, aright); :}
;

sentecia_if ::= IF PARENTESIS_A expresion:a PARENTESIS_C  sentencia_bloque:b  sentencia_elseif:c   {: RESULT = new SentenciasIF(a,b,c, aleft, aright); :}
;

sentencia_elseif ::= ELSE sentencia_bloque:a    {: RESULT = a; :}
    |  ELSE sentecia_if:a                       {: RESULT = a; :} 
    |                                           {: RESULT = null; :}
;

sentencia_bloque ::= LLAVE_A lista_instrucciones:a LLAVE_C  {: RESULT = new BloqueSentencia(a, aleft, aright); :}
;

sentenciasTransferencia ::= RETURN expresion PUNTOYCOMA    
    | RETURN  PUNTOYCOMA                                    
    | BREAK:a PUNTOYCOMA                                       {: RESULT = new Break(aleft, aright); :}
    | CONTINUE:a PUNTOYCOMA                                    {: RESULT = new Continue(aleft, aright); :}
;

match_funcion ::= MATCH expresion:a LLAVE_A match_inicio:b match_default:c LLAVE_C  {: RESULT = new Match(a, b, c, aleft, aright); :} 
;

match_inicio ::= match_lista:a   {: RESULT = a; :}
    |                            {: RESULT = null; :}                       
;

match_lista ::= match_lista:a casos:b      {: RESULT = a; RESULT.add(b); :}            
    | casos:a                            {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

casos ::= expresion:a DATOSMATCH LLAVE_A lista_instrucciones:b LLAVE_C     {: RESULT = new Casos(a, b, aleft, aright); :}
;

match_default ::= BAJO DATOSMATCH LLAVE_A lista_instrucciones:a LLAVE_C     {: RESULT = new BloqueSentencia(a, aleft, aright); :}        
    |                                                                       {: RESULT = null; :}                                
;



expresion ::= NUMERODECIMAL:val                                  {: RESULT = new Nativo(new Double(val), new Tipo(TipoDato.DECIMAL), valleft, valright ); :}
    | ENTERO:val                                                 {: RESULT = new Nativo(Integer.parseInt(val), new Tipo(TipoDato.ENTERO), valleft, valright ); :}
    | ID:val                                                     {: RESULT = new AccesoALaVariable(val, new Tipo(TipoDato.ID), valleft, valright ); :}
    | CADENA: val                                                {: RESULT = new Nativo(val, new Tipo(TipoDato.CADENA), valleft, valright ); :}
    | CARACTER: val                                              {: RESULT = new Nativo(val, new Tipo(TipoDato.CARACTER), valleft, valright ); :}
    | TRUE :val                                                  {: RESULT = new Nativo(true, new Tipo(TipoDato.BOOLEANO), valleft, valright ); :}
    | FALSE : val                                                {: RESULT = new Nativo(false, new Tipo(TipoDato.BOOLEANO), valleft, valright ); :}
    | expresion:a MAS expresion:b                                {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
    | expresion:a MENOS expresion:b                              {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
    | expresion:a POR expresion:b                                {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
    | expresion:a DIV expresion:b                                {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
    | expresion:a MODULO expresion:b                             {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :}
    | expresion:a POTENCIA expresion:b                           {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
    | MENOS expresion:a                                          {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec MENOS
    | expresion:a DOBLEIGUAL expresion:b                         {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); :}
    | expresion:a DIFERENCIA expresion:b                         {: RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIACION, aleft, aright); :}
    | expresion:a MENOR expresion:b                              {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); :}
    | expresion:a MENORIGUAL expresion:b                         {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUALQUE, aleft, aright); :}
    | expresion:a MAYOR expresion:b                              {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); :}
    | expresion:a MAYORIGUAL expresion:b                         {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOROIGUALQUE, aleft, aright); :}
    | expresion:a OR expresion:b                                 {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :}
    | expresion:a AND expresion:b                                {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :}
    | expresion:a XOR expresion:b                                {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :}
    | NOT expresion:a                                            {: RESULT = new Logicos(a, a, OperadoresLogicos.NOT, aleft, aright); :}
    | PARENTESIS_A expresion:a PARENTESIS_C                      {: RESULT = a; :}
    | casteos:a                                                  {: RESULT = a; :}
    | incremento:a                                               {: RESULT = a; :}
;
